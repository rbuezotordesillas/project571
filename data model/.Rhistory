WHERE userId=304'
user304<-sqldf(sqlStr)
#movie_genres<-strsplit(user304$genres, split="|", fixed=TRUE)
movie_genres<-cSplit(user304, "genres", sep="|")
profile_u304<-user304[,1:2]
profile_u304[,genres]<-NA
profile_u304<-profile_u304[,-2]
#TODO: look at this
#genres[8]==u[1,3:9]
#grepl(movie_genres[1,3],genres[8])
# for(i in 1:dim.data.frame(movie_genres)[1]){
#   for(j in 3:9){
#     index<-which(genres==movie_genres[i,j])
#     profile_u304[i,index]<-1
#   }
# }
movie_genres[1,]%in% genres
#movie_genres<-strsplit(user304$genres, split="|", fixed=TRUE)
movie_genres<-cSplit(user304, "genres", sep="|", type.convert = FALSE)
str(movie_genres)
movie_genres[1,]%in% genres
movie_genres[2,]%in% genres
movie_genres[2,]
genres
genres%in%movie_genres[1,]
genres==movie_genres[1,]
#First we are going to separate each movie in its genre
library(splitstackshape)
#movies<-cSplit(movies, "genres", sep="|")
genres<-c("Action", "Adventure", "Animation", "Children", "Comedy", "Crime", "Documentary", "Drama", "Fantasy","Film-Noir", "Horror", "IMAX", "Musical", "Mystery", "Romance", "Sci-Fi", "Thriller", "War", "Western", "(no genres listed)")
sqlStr<-'SELECT movies.*
FROM ratings INNER JOIN movies ON ratings.movieId==movies.movieId
WHERE userId=304'
user304<-sqldf(sqlStr)
#movie_genres<-strsplit(user304$genres, split="|", fixed=TRUE)
movie_genres<-cSplit(user304, "genres", sep="|", type.convert = FALSE)
profile_u304<-user304[,1:2]
profile_u304[,genres]<-NA
profile_u304<-profile_u304[,-2]
#TODO: look at this
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])
profile_u304[i,index]<-1
}
View(profile_u304)
View(user304)
profile_u304<-user304[,1:2]
profile_u304<-user304[,1:2]
profile_u304[,genres]<-NA
profile_u304<-profile_u304[,-2]
index<-which(genres%in%movie_genres[1])
index
index<-which(genres%in%movie_genres[2])
index
index+1
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])+1 #We have to add one since the first column is movieId
profile_u304[i,index]<-1
}
View(profile_u304)
movie_genres[2]
movie_genres[10]
sample(movies$movieId, n=10)
sample(movies$movieId, size=10)
sample(movies$movieId, size=10)
#First we create the 10 samples:
set.seed(1122)
sample(movies$movieId, size=10)
sample(movies$movieId, size=10)
rm(profile_u304)
movies_u304[,genres]<-NA
movies_u304[,genres]<-NA
movies_u304<-user304[,1:2]
movies_u304[,genres]<-NA
movies_u304<-movies_u304[,-c(1,2)]
View(movies_u304)
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])
movies_u304[i,index]<-1
}
profile_u304<-apply(movies_u304, MARGIN = 2,mean)
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])
movies_u304[i,index]<-1
}
profile_u304<-apply(movies_u304, MARGIN = 2,mean)
profile_u304
View(profile_u304)
movies_u304<-user304[,1:2]
movies_u304[,genres]<-NA
movies_u304<-profile_u304[,-2]
movies_u304<-user304[,1:2]
movies_u304[,genres]<-NA
movies_u304<-movies_u304[,-2]
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])+1
movies_u304[i,index]<-1
}
movies_u304<-movies_u304[,-1]
View(movies_u304)
profile_u304<-apply(movies_u304, MARGIN = 2,mean)
tapply(movies_u304, MARGIN = 2,mean)
mean(movies_u304$Action)
mean(movies_u304, na.rm=TRUE)
str(movies_u304)
movies_u304<-user304[,1:2]
movies_u304[,genres]<-0
movies_u304<-movies_u304[,-2]
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])+1
movies_u304[i,index]<-1
}
movies_u304<-movies_u304[,-1]
profile_u304<-apply(movies_u304, MARGIN = 2,mean)
sum(movies_u304$Action)
19/113
mean(movies_u304$Action, na.rm=TRUE)
movies_u304<-user304[,1:2]
movies_u304[,genres]<-NA
movies_u304<-movies_u304[,-2]
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])+1
movies_u304[i,index]<-1
}
movies_u304<-movies_u304[,-1]
mean(movies_u304$Action, na.rm=TRUE)
movies_u304<-user304[,1:2]
movies_u304[,genres]<-0
movies_u304<-movies_u304[,-c(1,2)]
for(i in 1:dim.data.frame(movie_genres)[1]){
index<-which(genres%in%movie_genres[i,])
movies_u304[i,index]<-1
}
#movies_u304<-movies_u304[,-1]
profile_u304<-apply(movies_u304, MARGIN = 2, mean)
profile_u304
a[,genres]<-0
a<-0
a[,genres]<-0
rm(a)
View(movies)
#First we create the 10 samples:
set.seed(1122)
index<-sample(movies$movieId, size=10)
sampled_movies<-movies[index, 1]
index
index<-sample(movies$movieId, size=10)
index
set.seed(34543)
index<-sample(movies$movieId, size=10)
index
max(movies$movieId)
#First we create the 10 samples:
set.seed(1122)
movieID<-sample(movies$movieId, size=10)
#First we create the 10 samples:
set.seed(1122)
movieID<-sample(movies$movieId, size=10)
#First we create the 10 samples:
set.seed(1122)
movieID<-sample(movies$movieId, size=10)
movie_genres<-movies[movieID%in%movies$movieId,]
movieID%in%movies$movieId
movieID
which(movieID==movies$movieId)
which(movieID%in%movies$movieId)
movies$movieId
movie_genres<-movies[movies$movieId%in%movieID,]
movie_genres
View(movies)
movie_genres<-cSplit(movie_genres, "genres", sep="|", type.convert = FALSE)
movie_matrix<-movie_genres[,1:2]
movie_matrix[,genres]<-0
movie_matrix<-movie_matrix[,-c(1,2)]
movie_genres
movie_matrix
for(i in 1:dim.data.frame(movie_matrix)[1]){
index<-which(genres%in%movie_genres[i,])
movie_matrix[i,index]<-1
}
View(movie_matrix)
View(movie_genres)
View(movie_matrix)
View(movie_matrix)
paste0("movie", "2")<-2
paste0("movie", "2")
#First we create the 10 samples:
set.seed(1122)
movieID<-sample(movies$movieId, size=10)
movie_genres<-movies[movies$movieId%in%movieID,]
movie_genres<-cSplit(movie_genres, "genres", sep="|", type.convert = FALSE)
movie_matrix<-movie_genres[,1:2]
movie_matrix[,genres]<-0
movie_matrix<-movie_matrix[,-2]
for(i in 1:dim.data.frame(movie_matrix)[1]){
index<-which(genres%in%movie_genres[i,])
movie_matrix[i,index]<-1
}
View(movie_matrix)
#First we create the 10 samples:
set.seed(1122)
movieID<-sample(movies$movieId, size=10)
movie_genres<-movies[movies$movieId%in%movieID,]
movie_genres<-cSplit(movie_genres, "genres", sep="|", type.convert = FALSE)
movie_matrix<-movie_genres[,1:2]
movie_matrix[,genres]<-0
movie_matrix<-movie_matrix[,-2]
for(i in 1:dim.data.frame(movie_matrix)[1]){
index<-which(genres%in%movie_genres[i,])+1 #We kept the movieId column to do the multiplication
movie_matrix[i,index]<-1
}
install.packages('lsa')
library(lsa)
cosine(movie_matrix, profile_u304)
cosine(movie_matrix[1,], profile_u304)
cosine(movie_matrix[,2:21], profile_u304)
cosine(movie_matrix[1,2:21], profile_u304)
movie_matrix[1, 2:21]
a<-movie_matrix[1, 2:21]
cosine(a, profile_u304)
profile_u304
str(movie_matrix)
sum(a*profile_u304)
mapply(FUN=cosine, a, profile_u304)
cosine(a, profile_u304)
str(a)
cosine(as.array(a), profile_u304)
a
profile_u304
cosine(as.vector(a), profile_u304)
as.vector(a)
str(A)
str(a)
my.cos<-function(x, y){
return(sum(x*y)/(norm(x, type=2)*norm(y, type=2)))
}
m<-my.cos(a,profile_u304)
str(a)
a<-as.integer(a)
a
y<-as.integer(x)
my.cos<-function(x, y){
x<-as.integer(x)
y<-as.integer(x)
return(sum(x*y)/(norm(x, type=2)*norm(y, type=2)))
}
m<-my.cos(a,profile_u304)
norm(a, type=2)
cosine(a,y)
cosine(a,profile_u304)
str(movie_profile)
str(movie_matrix)
cosine(a, profile_u304)
my.cos<-function(movie_profile, user_profile){
x<-as.integer(movie_profile)
return(cosine(x, user_profile))
}
a<-sapply(movie_matrix, FUN=my.cos, user_profile=profile_u304)
mapply(my.cos, movie_matrix, profile_u304)
my.cos(movie_matrix[1,2:21], profile_u304)
my.cos(movie_matrix[2,2:21], profile_u304)
movieID[1]%in%movies$movieId
movies$movieId%in%movieID[1]
#First we create the 10 samples:
set.seed(1122)
movieID<-sample(movies$movieId, size=10)
movie_genres<-movies[movies$movieId%in%movieID,]
movie_genres<-cSplit(movie_genres, "genres", sep="|", type.convert = FALSE)
movie_matrix<-movie_genres[,1:2]
movie_matrix[,genres]<-0
#movie_matrix<-movie_matrix[,-2]
for(i in 1:dim.data.frame(movie_matrix)[1]){
index<-which(genres%in%movie_genres[i,])+2 #We kept the movieId and title
movie_matrix[i,index]<-1
}
sapply(movie_matrix, my.cos, movie_matrix[,2:22], profile_u304)
a<-sapply(movie_matrix, my.cos, movie_matrix[,2:22], profile_u304)
a<-sapply(movie_matrix, my.cos, movie_matrix[1,2:22], profile_u304)
mapply(movie_matrix, my.cos, movie_matrix[1,2:22], profile_u304)
mapply(my.cos, movie_matrix[1,2:22], profile_u304)
mapply(my.cos, movie_matrix[,2:22], profile_u304)
recommendation<-movie_matrix[,1:2]
recommendation[,"similarity"]<-0
for(i in 1:dim.data.frame(movie_matrix)[1]){
recommendation$similarity<-my.cos(movie_matrix[i, 2:22], profile_u304)
}
View(recommendation)
for(i in 1:dim.data.frame(movie_matrix)[1]){
recommendation$similarity<-my.cos(movie_matrix[i, 3:22], profile_u304)
}
mapply(my.cos, movie_matrix[,3:22], profile_u304)
mapply(my.cos, movie_matrix[1,3:22], profile_u304)
mapply(my.cos, movie_matrix[,3:22], profile_u304)
mapply(my.cos, movie_matrix[1,3:22], profile_u304)
for(i in 1:dim.data.frame(movie_matrix)[1]){
recommendation$similarity<-my.cos(movie_matrix[i, 3:22], profile_u304)
}
View(recommendation)
for(i in 1:dim.data.frame(movie_matrix)[1]){
recommendation$similarity[i]<-my.cos(movie_matrix[i, 3:22], profile_u304)
}
sort(recommendation$similarity, decreasing=TRUE)
order(recommendation$similarity, decreasing=TRUE)
recommendation<-recommendation[order(recommendation$similarity, decreasing=TRUE),]
View(recommendation)
for(i in 1:dim.data.frame(movie_matrix)[1]){
cat('Movie', recommendation$title[i], 'has a cosine similarity of', recommendation$similarity[i])
}
for(i in 1:dim.data.frame(movie_matrix)[1]){
cat('Movie', recommendation$title[i], 'has a cosine similarity of', recommendation$similarity[i], '\n')
}
lapply(movie_matrix, my.cos, user_profile=profile_u304)
#setwd("~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4")
ratings<-read.csv('~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4/ratings.csv', sep=',', header=T, stringsAsFactors = F)
movies<-read.csv('~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4/movies.csv', sep=',', header=T, stringsAsFactors = F)
path<-'~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4/hw4.movies'
if(dir.exists(path)==FALSE){dir.create(path)}
files<-list.files(path, full.names = T)
#We use sql queries to obtain the information and import it into a file
library('sqldf')
sqlStr<-'SELECT ratings.userId, movies.title
FROM ratings INNER JOIN movies ON ratings.movieId==movies.movieId'
moviesAndRatings<-sqldf(sqlStr)
#We are going to see how many unique users we have:
sqlStr<-'SELECT DISTINCT userId FROM moviesAndRatings'
users<-sqldf(sqlStr)
#We do this so that the files are only created once
if(sum(file.exists(files))!=length(users$userId)){
for(i in 1:length(users$userId)){
setwd(path) #We change the directory so that all the files are created there
index<-which(moviesAndRatings$userId==users$userId[i])
name<-paste0('user', i, '.txt')
write(moviesAndRatings$title[index], file=name, sep='\t')
}
files<-list.files(path, full.names = T)
}
library(textreuse)
corpus <- TextReuseCorpus(files, tokenizer = tokenize_ngrams, n = 5, keep_tokens = TRUE)
col<-nrow(users)
shingles<-tokens(corpus)
#row<-sum(wordcount(corpus)) #it tells us duplicates
shingles_clean<-unique(shingles)
names(shingles_clean)<-names(shingles)
row<-0
for(i in 1:length(users$userId)){
row<-row+length(shingles_clean[[i]])
}
cat('There are' , col, 'columns and ' , row, 'rows')
library(stringr)
user20 <- corpus[["user20"]]
n<-str_count(user20, '\n')+1 #We add one to take into consideration the last movie of the list
cat('The number of movies that user20 rated was: ', n)
tokens(user20)[1:5]
compMatrix<-pairwise_compare(corpus,jaccard_similarity)
candidate_matches<-pairwise_candidates(compMatrix)
cat('There are', sum(candidate_matches$score>=0.6), 'users')
cat('There are', sum(candidate_matches$score>=0.5), 'users')
cat('There are', sum(candidate_matches$score>=0.4), 'users')
lsh_probability(h=190,b=95, s=0.2)
candidate_matches$a=="user191"
which(candidate_matches$a%in%"user191")
candidate_matches[which(candidate_matches$a%in%"user191"),]
which(candidate_matches$a=="user191")
a<-which((candidate_matches$a=="user191")&candidate_matches$score>0)
a
candidate_matches[a,]
candidate_matches[candidate_matches$b=="user513"]
candidate_matches[candidate_matches$b=="user513",]
candidate_matches[candidate_matches$a="user191"&candidate_matches$b=="user513",]
candidate_matches[candidate_matches$a=="user191"&candidate_matches$b=="user513",]
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
#similarity<-candidate_matches[which(candidate_matches$a=="user191"),]
candidate_matches[which(candidate_matches$score>=0.4), ]
minhash <- minhash_generator(n=190, seed=100)
corpus<-TextReuseCorpus(files, tokenizer = tokenize_ngrams, n = 5, minhash_func = minhash, keep_tokens = TRUE)
user20 <- corpus[["user20"]]
tokens(user20)[1:5]
lsh_threshold(h=190,b=95)
buckets<-lsh(corpus, bands = 95)
candidates <- lsh_candidates(buckets)
candidates_res <- lsh_compare(candidates, corpus, jaccard_similarity)
candidates_res[which(candidates_res$score>=0.4),]
a<-candidates_res[which(candidates_res$a=="user191"),]
a
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
similarity<-candidate_matches[which(candidate_matches$a=="user191"),]
b<-similarity
b<-b[order(b$score, decreasing=TRUE),]
b[1:12,]
a<-a[order(a$score, decreasing=TRUE),]
a[1:12,]
tail(a)
View(a[1:12,])
View(b[1:12,])
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
similarity<-candidate_res[which(candidate_res$a=="user191"),]
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
similarity<-candidates_res[which(candidates_res$a=="user191"),]
similarity<-similarity[order(a$score, decreasing=TRUE),]
similarity[1:12,]
similarity<-similarity[order(a$score, decreasing=TRUE),]
similarity[1:12,]
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
similarity<-candidate_matches[which(candidate_matches$a=="user191"),]
similarity<-similarity[order(similarity$score, decreasing=TRUE),]
similarity[1:12,]
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
similarity<-candidates_res[which(candidate_res$a=="user191"),]
sqlStr<-'SELECT movieId, rating
FROM ratings
WHERE userId=191'
user191<-sqldf(sqlStr)
similarity<-candidates_res[which(candidates_res$a=="user191"),]
similarity<-similarity[order(similarity$score, decreasing=TRUE),]
similarity[1:12,]
#setwd("~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4")
ratings<-read.csv('~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4/ratings.csv', sep=',', header=T, stringsAsFactors = F)
movies<-read.csv('~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4/movies.csv', sep=',', header=T, stringsAsFactors = F)
path<-'~/Trabajos Carlota/ERASMUS/IIT/CS422-Data Mining/Homework/hw4/hw4.movies'
if(dir.exists(path)==FALSE){dir.create(path)}
files<-list.files(path, full.names = T)
#We use sql queries to obtain the information and import it into a file
library('sqldf')
sqlStr<-'SELECT ratings.userId, movies.title
FROM ratings INNER JOIN movies ON ratings.movieId==movies.movieId'
moviesAndRatings<-sqldf(sqlStr)
#We are going to see how many unique users we have:
sqlStr<-'SELECT DISTINCT userId FROM moviesAndRatings'
users<-sqldf(sqlStr)
#We do this so that the files are only created once
if(sum(file.exists(files))!=length(users$userId)){
for(i in 1:length(users$userId)){
setwd(path) #We change the directory so that all the files are created there
index<-which(moviesAndRatings$userId==users$userId[i])
name<-paste0('user', i, '.txt')
write(moviesAndRatings$title[index], file=name, sep='\t')
}
files<-list.files(path, full.names = T)
}
library(textreuse)
corpus <- TextReuseCorpus(files, tokenizer = tokenize_ngrams, n = 5, keep_tokens = TRUE)
sum(lengths(unique(tokens(corpus))))
setwd("C:/Users/Carru/SoftwareRepositories/project571/data model")
data<-read.csv('../data collection/Data/ModelData/modelData2.csv', header=T, sep=";", na.strings='Null', stringsAsFactors = F)
###TODO: SET SEED AS A GLOBAL VARIABLE!!!
#We start observing the data
index<-which(complete.cases(data)==FALSE)
#data[index, ]
#unique(data[index, "Account"])
#There are 3 accounts that stopped tweeting for a period of time/stopped functioning
#TODO: discuss what to do with these accounts
#Create variable isWeekend:
data[, "date"]<-as.Date(data[, "date"])
library('lubridate')
day<-wday(data[,"date"], week_start=1) #starts on Monday
data[, "isWeekend"]<-0
data$isWeekend[which(day>=6)]<-1 #Friday=5/Saturday=6
#TODO: discuss, works better when it is Friday...
#Create variable change in number of followers
followers<- read.csv('../data collection/Data/ModelData/historicFollowers.csv',header = T,stringsAsFactors = F,sep = ';',na.strings = 'Null')
data[, "change_followers"]<-0
data$change_followers[which(data$date=="2018-02-24")]<-(data$Followers[which(data$date=="2018-02-24")]-followers$X2018.02.23)/followers$X2018.02.23
startday <-  data$date[1]
endday <- data$date[nrow(data)]
a1 <- data$Followers[which((data$date> (startday-1)) & (data$date< endday))]
b1 <- data$Followers[which((data$date> startday) & (data$date<(endday+1)))]
data$change_followers[data$date>startday] <- (b1 - a1)/a1
#This is a change in followers (decimal)
#TODO: acceleration of increase in followers instead of velocity
#We create a category column
account<-read.csv('../data collection/Data/ModelData/accountsComplete.csv', header = T,stringsAsFactors = F,sep = ';',na.strings = 'Null')
data[, "category"]<-"a"
data$category[which(data$Account==account$Account)]<-account$Category
data$category<-as.factor(data$category)
#We remove the Accounts that have NAs
i<-which((data$Account=="sportbible")|(data$Account=="fabulousanimals")|(data$Account=="Earth_Pics"))
cat('The percentage of removed data is:', (length(i)/dim(data)[1])*100, '\n') #So we can delete them
data_clean<-data[-i, ]
#We introduce another column that partitions the accounts into groups depending on their size
clusterpartition<-read.csv('../data exploration/AccountClusters.csv', header=T, stringsAsFactors = F, sep=',', na.strings='Null')
clusterpartition<-clusterpartition[,c("Account", "Cluster")]
library('sqldf')
sqlStr<-'SELECT *
FROM data_clean INNER JOIN clusterpartition ON data_clean.Account== clusterpartition.Account'
data_clean<-sqldf(sqlStr)
data_clean<-data_clean[,-13]
# #TODO: label the clusters
# #TODO: ask what each number represents
data_clean$Cluster<-factor(data_clean$Cluster, levels=c(1,2,3,4))
#We are going to create a variable 1-Increase 0-Decrease or stayed the same
data_clean[, "logic_change"]<-0
data_clean$logic_change[which(data_clean$change_followers>0)]<-1
data_clean$logic_change<-as.logical(data_clean$logic_change)
names(data_clean)
