model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
#set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
#change as percentage: -0.00834
targetVar <-  "change_followers"
set.seed(1914)
#We have to partition the data again, since now we have a different targetVar
inTrain <- createDataPartition(y = data_clean[,targetVar], list = FALSE, p = 0.8)
train <- data_clean[inTrain,]
test <- data_clean[-inTrain,]
stopifnot(nrow(train) + nrow(test) == nrow(data_clean))
sum(train$change_followers)/nrow(train)
sum(test$change_followers)/nrow(test)
#Relationship between followers and change in followers (change in followers as in variation)
simple_data<-data
simple_data$change_followers[which(data$date=="2018-02-24")]<-simple_data$change_followers[which(data$date=="2018-02-24")]*followers$X2018.02.23
simple_data$change_followers[simple_data$date>startday]<-simple_data$change_followers[simple_data$date>startday]*a1
train2<-simple_data[simple_data$date=="2018-02-26",]
test2<-simple_data[simple_data$date=="2018-02-27",]
train2<-train2[, c('Followers', 'change_followers')]
test2<-test2[, c('Followers', 'change_followers')]
# train2<-simple_data[1:indexLast,]
# test2<-data_clean[(indexLast+1):nrow(data_clean),]
# stopifnot(nrow(train2)+nrow(test2)==nrow(data_clean))
modelFollower<-lm(change_followers~Followers, data=train2)
summary(modelFollower)
predFollower<-predict(modelFollower, test2)
#The following function calculates the R_squared of the prediction
RsquaredLM<-function(pred, test, targetVar){
pred<-as.data.frame(pred)
n<-as.character(names(pred))
pred[, "actual"]<-test[, targetVar]
RSE<-sum((pred[,"actual"]-pred[, n])**2)
ymean<-mean(test[, targetVar])
Rtot<-sum((test[, targetVar]-ymean)**2)
R_squared<-1-(RSE/Rtot)
}
#TODO: check this, I get negative value (?)
R_squaredF<-RsquaredLM(predFollower, test2, targetVar)
ggplot(train2, aes(x = Followers, y = change_followers))+ geom_point() +
geom_abline(intercept=2.126e+02, slope=2.921e-04,color='red') +
ggtitle("Relation between Followers and change in followers") +
theme(plot.title = element_text(hjust = 0.5)) +
labs(x="Followers", y="change_followers")
#Model including all variables and change_followers as absolute change
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = TRUE)
model <- lm(modelForm, data = train)
summary(model)
#plot(model)
#TODO: investigate how to export them automatically to a file
#If we use Followers we have a R_squared of 0.54 for both the training and the test
#If we don't use it, we have a R_squared of 0.2234
cat('The adjusted r squared is: ', summary(model)$adj.r.squared)
#change in %:0.0239
#Prediction:
pred<-predict(model, test)
R_squared<-RsquaredLM(pred, test, targetVar)
cat("The value of the R squared for the test is", R_squared, "\n")
summary(reg.tree)
set.seed(1112)
reg.tree<-rpart(modelForm, data=train)
summary(reg.tree)
rpart.plot(reg.tree, type=4, digits=4 , main="Full Regression Tree")
